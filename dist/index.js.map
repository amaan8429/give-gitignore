{"version":3,"sources":["../src/index.ts","../src/sample.ts"],"sourcesContent":["#! /usr/bin/env node\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport readline from \"readline\";\n\nimport { gitignoreContent } from \"./sample\";\n\nconst currentDir: string = process.cwd();\n\nconst gitignorePath: string = path.join(currentDir, \".gitignore\");\n\n/**\n * Checks if a file exists at the given file path.\n * @param {string} filePath - The path to the file to check.\n * @returns {Promise<boolean>} A promise that resolves to `true` if the file exists, `false` otherwise.\n */\nasync function fileExists(filePath: string): Promise<boolean> {\n  return new Promise((resolve) => {\n    fs.access(filePath, fs.constants.F_OK, (err) => {\n      resolve(!err);\n    });\n  });\n}\n\n/**\n * Writes the given content to the specified file path.\n * @param {string} filePath - The path to the file to write.\n * @param {string} content - The content to write to the file.\n * @returns {Promise<void>} A promise that resolves when the file has been written successfully.\n */\nasync function writeGitignoreFile(\n  filePath: string,\n  content: string\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(filePath, content, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\n/**\n * Handles the creation of the .gitignore file.\n * If the file already exists, it asks the user if they want to overwrite it.\n * If the file does not exist, it creates a new one with the provided content.\n * @param {string} filePath - The path to the .gitignore file.\n * @param {string} content - The content to write to the .gitignore file.\n * @returns {Promise<void>} A promise that resolves when the file creation process is complete.\n */\nasync function createGitignoreFile(\n  filePath: string,\n  content: string\n): Promise<void> {\n  if (await fileExists(filePath)) {\n    // File exists, ask the user if they want to overwrite it\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n\n    rl.question(\n      \"The .gitignore file already exists. Do you want to overwrite it? (yes/no): \",\n      async (answer) => {\n        rl.close();\n        if (answer.toLowerCase() !== \"yes\") {\n          console.log(\"The .gitignore file was not overwritten.\");\n        } else {\n          try {\n            await writeGitignoreFile(filePath, content);\n            console.log(\"The .gitignore file has been overwritten.\");\n          } catch (err) {\n            console.error(\"Error writing the .gitignore file:\", err);\n          }\n        }\n      }\n    );\n  } else {\n    // File does not exist, create it\n    try {\n      await writeGitignoreFile(filePath, content);\n      console.log(\"The .gitignore file has been created.\");\n    } catch (err) {\n      console.error(\"Error creating the .gitignore file:\", err);\n    }\n  }\n}\n\ncreateGitignoreFile(gitignorePath, gitignoreContent);\n","export const gitignoreContent = `# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# database\n/prisma/db.sqlite\n/prisma/db.sqlite-journal\n\n# next.js\n/.next/\n/out/\nnext-env.d.ts\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# local env files\n.env\n.env*.local\n\n# vercel\n.vercel\n\n# local env files\n.env*.local\n.env\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,gBAAe;AACf,kBAAiB;AACjB,sBAAqB;;;ACJd,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ADQhC,IAAM,aAAqB,QAAQ,IAAI;AAEvC,IAAM,gBAAwB,YAAAA,QAAK,KAAK,YAAY,YAAY;AAOhE,SAAe,WAAW,UAAoC;AAAA;AAC5D,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,gBAAAC,QAAG,OAAO,UAAU,UAAAA,QAAG,UAAU,MAAM,CAAC,QAAQ;AAC9C,gBAAQ,CAAC,GAAG;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAQA,SAAe,mBACb,UACA,SACe;AAAA;AACf,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAAA,QAAG,UAAU,UAAU,SAAS,CAAC,QAAQ;AACvC,YAAI,KAAK;AACP,iBAAO,GAAG;AAAA,QACZ,OAAO;AACL,kBAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAUA,SAAe,oBACb,UACA,SACe;AAAA;AACf,QAAI,MAAM,WAAW,QAAQ,GAAG;AAE9B,YAAM,KAAK,gBAAAC,QAAS,gBAAgB;AAAA,QAClC,OAAO,QAAQ;AAAA,QACf,QAAQ,QAAQ;AAAA,MAClB,CAAC;AAED,SAAG;AAAA,QACD;AAAA,QACA,CAAO,WAAW;AAChB,aAAG,MAAM;AACT,cAAI,OAAO,YAAY,MAAM,OAAO;AAClC,oBAAQ,IAAI,0CAA0C;AAAA,UACxD,OAAO;AACL,gBAAI;AACF,oBAAM,mBAAmB,UAAU,OAAO;AAC1C,sBAAQ,IAAI,2CAA2C;AAAA,YACzD,SAAS,KAAK;AACZ,sBAAQ,MAAM,sCAAsC,GAAG;AAAA,YACzD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,OAAO;AAEL,UAAI;AACF,cAAM,mBAAmB,UAAU,OAAO;AAC1C,gBAAQ,IAAI,uCAAuC;AAAA,MACrD,SAAS,KAAK;AACZ,gBAAQ,MAAM,uCAAuC,GAAG;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA;AAEA,oBAAoB,eAAe,gBAAgB;","names":["path","fs","readline"]}